39. Write a NumPy program to change the data type of an array. 
Expected Output:
[[ 2 4 6]
[ 6 8 10]]
Data type of the array x is: int32
New Type: float64
[[ 2. 4. 6.]
[ 6. 8. 10.]]
***

40. Write a NumPy program to create a new array of 3*5, filled with 2. 
Expected Output:
[[2 2 2 2 2]
[2 2 2 2 2]
[2 2 2 2 2]]
[[2 2 2 2 2]
[2 2 2 2 2]
[2 2 2 2 2]]
***

41. Write a NumPy program to create an array of 10's with the same shape and type of an given array. 
Sample array: x = np.arange(4, dtype=np.int64)
Expected Output:
[10 10 10 10]
***

42. Write a NumPy program to create a 3-D array with ones on a diagonal and zeros elsewhere. 
Expected Output:
[[ 1. 0. 0.]
[ 0. 1. 0.]
[ 0. 0. 1.]]
***

43. Write a NumPy program to create a 2-D array whose diagonal equals [4, 5, 6, 8] and 0's elsewhere. 
Expected Output:
[[4 0 0 0]
[0 5 0 0]
[0 0 6 0]
[0 0 0 8]]
***

44. Write a NumPy program to create a 1-D array going from 0 to 50 and an array from 10 to 50. 
Expected Output:
Array from 0 to 50:
[ 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]
Array from 10 to 50:
[10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
35 36 37 38 39 40 41 42 43 44 45 46 47 48 49]
***

45. Write a NumPy program to Create a 1-D array of 30 evenly spaced elements between 2.5. and 6.5, inclusive. 
Expected Output:
[ 2.5 2.63793103 2.77586207 2.9137931 3.05172414 3.18965517
3.32758621 3.46551724 3.60344828 3.74137931 3.87931034 4.01724138
4.15517241 4.29310345 4.43103448 4.56896552 4.70689655 4.84482759
4.98275862 5.12068966 5.25862069 5.39655172 5.53448276 5.67241379
5.81034483 5.94827586 6.0862069 6.22413793 6.36206897 6.5 ]
***

46. Write a NumPy program to to create a 1-D array of 20 element spaced evenly on a log scale between 2. and 5., exclusive. 
Expected Output:
[ 100. 141.25375446 199.5262315 281.83829313
398.10717055 562.34132519 794.32823472 1122.0184543
1584.89319246 2238.72113857 3162.27766017 4466.83592151
6309.5734448 8912.50938134 12589.25411794 17782.79410039
25118.8643151 35481.33892336 50118.72336273 70794.57843841]
***

47. Write a NumPy program to create an array which looks like below array. 
Expected Output:
[[ 0. 0. 0.]
[ 1. 0. 0.]
[ 1. 1. 0.]
[ 1. 1. 1.]]
***

48. Write a NumPy program to create an array which looks like below array. 
Expected Output:
[[ 2 3 4]
[ 5 6 7]
[ 0 9 10]
[ 0 0 13]]
***

49. Write a NumPy program to collapse a 3-D array into one dimension array. 
Expected Output:
3-D array:
[[ 1. 0. 0.]
[ 0. 1. 0.]
[ 0. 0. 1.]]
One dimension array:
[ 1. 0. 0. 0. 1. 0. 0. 0. 1.]
***

50. Write a NumPy program to find the 4th element of a specified array. 
Expected Output:
[[ 2 4 6]
[ 6 8 10]]
Forth e1ement of the array:
6
***

51. Write a NumPy program to interchange two axes of an array. 
Sample array: [[1 2 3]]
Expected Output:
[[1]
[2]
[3]]
***

52. Write a NumPy program to move axes of an array to new positions. Other axes remain in their original order. 
Expected Output:
(3, 4, 2)
(4, 2, 3)
***

53. Write a NumPy program to move the specified axis backwards, until it lies in a given position. 
Move the following 3rd array axes to first position.
(2,3,4,5)
Sample Expected Output:
(2, 5, 3, 4)
***

54. Write a NumPy program to convert specified inputs to arrays with at least one dimension. 
Expected Output:
[ 12.]
[[ 0. 1. 2.]
[ 3. 4. 5.]]
[array([1]), array([3, 4])]
***

55. Write a NumPy program to view inputs as arrays with at least two dimensions, three dimensions. 
Expected Output:
View inputs as arrays with at least two dimensions:
[10]
[[ 0. 1.]
[ 2. 3.]]
View inputs as arrays with at least three dimensions:
[[[15]]]
[[[ 0.]
[ 1.]
[ 2.]]]
***

56. Write a NumPy program to insert a new axis within a 2-D array. 
2-D array of shape (3, 4).
Expected Output:
New shape will be will be (3, 1, 4).
***

57. Write a NumPy program to remove single-dimensional entries from a specified shape. 
Specified shape: (3, 1, 4)
Expected Output: (3, 4)
***

58. Write a NumPy program to concatenate two 2-dimensional arrays. 
Expected Output:
Sample arrays: ([[0, 1, 3], [5, 7, 9]], [[0, 2, 4], [6, 8, 10]]
Expected Output:
[[ 0 1 3 0 2 4]
[ 5 7 9 6 8 10]]
***

59. Write a NumPy program to convert 1-D arrays as columns into a 2-D array. 
Sample array: (10,20,30), (40,50,60)
Expected Output:
[[10 40]
[20 50]
[30 60]]
***

60. Write a NumPy program to convert (in sequence depth wise (along third axis)) two 1-D arrays into a 2-D array. 
Sample array: (10,20,30), (40,50,60)
Expected Output:
[[[10 40]]
[[20 50]]
[[30 60]]]
***

61. Write a NumPy program to split an array of 14 elements into 3 arrays, each of which has 2, 4, and 8 elements in the original order. 
Expected Output:
Original array: [ 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
After splitting:
[array([1, 2]), array([3, 4, 5, 6]), array([ 7, 8, 9, 10, 11, 12, 13, 14])]
***

62. Write a NumPy program to split of an array of shape 4x4 it into two arrays along the second axis. 
Sample array :
[[ 0 1 2 3]
[ 4 5 6 7]
[ 8 9 10 11]
[12 13 14 15]]
Expected Output:
[array([[ 0, 1],
[ 4, 5],
[ 8, 9],
[12, 13]]), array([[ 2, 3],
[ 6, 7],
[10, 11],
[14, 15]]), array([], shape=(4, 0), dtype=int64)]
***

63. Write a NumPy program to get the number of nonzero elements in an array. 
Expected Output:
Original array:
[[ 0 10 20]
[20 30 40]]
Number of non zero elements in the above array:
5
***

64. Write a NumPy program to create a 5x5 matrix with row values ranging from 0 to 4. 
Original array:
[[ 0. 0. 0. 0. 0.]
[ 0. 0. 0. 0. 0.]
[ 0. 0. 0. 0. 0.]
[ 0. 0. 0. 0. 0.]
[ 0. 0. 0. 0. 0.]]
Row values ranging from 0 to 4.
[[ 0. 1. 2. 3. 4.]
[ 0. 1. 2. 3. 4.]
[ 0. 1. 2. 3. 4.]
[ 0. 1. 2. 3. 4.]
[ 0. 1. 2. 3. 4.]]
***

65. Write a NumPy program to test if specified values are present in an array. 
Expected Output:
Original array:
[[ 1.12 2. 3.45]
[ 2.33 5.12 6. ]]
True
False
True
False
True

***

66. Write a NumPy program to create a vector of size 10 with values ranging from 0 to 1, both excluded. 
Expected Output:
[ 0.09090909 0.18181818 0.27272727 0.36363636 0.45454545 0.54545455
0.63636364 0.72727273 0.81818182 0.90909091]
***

67. Write a NumPy program to make an array immutable (read-only). 
Expected Output:
Test the array is read-only or not:
Try to change the value of the first element:
Traceback (most recent call last):
File "19236bd0-0bd9-11e7-a232-c706d0968eb6.py", line 6, in
x[0] = 1
ValueError: assignment destination is read-only
***

68. Write a NumPy program (using numpy) to sum of all the multiples of 3 or 5 below 100. 
Expected Output:
[ 3 5 6 9 10 12 15 18 20 21 24 25 27 30 33 35 36 39 40 42 45 48 50 51 54
55 57 60 63 65 66 69 70 72 75 78 80 81 84 85 87 90 93 95 96 99]
2318
***

69. Write a NumPy program to create an array with 10^3 elements. 
Expected Output:
[ 0. 1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11.
12. 13. 14. 15. 16. 17. 18. 19. 20. 21. 22. 23.
24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34. 35.
- - - - - - - - - - - - - - - - - - - -
972. 973. 974. 975. 976. 977. 978. 979. 980. 981. 982. 983.
984. 985. 986. 987. 988. 989. 990. 991. 992. 993. 994. 995.
996. 997. 998. 999.]
***

70. Write a NumPy program to create display every element of an numpy array. 
Expected Output:
0 1 2 3 4 5 6 7 8 9 10 11
***

71. Write a NumPy program to create and display every element of an numpy array in Fortran order. 
Expected Output:
Elements of the array in Fortan array:
0 4 8 1 5 9 2 6 10 3 7 11
***

72. Write a NumPy program to create a 5x5x5 cube of 1's. 
Expected Output:
[[[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]]

[[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]]

[[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]]

[[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]]

[[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]
[1 1 1 1 1]]]
***

73. Write a NumPy program to create an array of (3, 4) shape, multiply every element value by 3 and display the new array. 
Expected Output:
Original array elements:
[[ 0 1 2 3]
[ 4 5 6 7]
[ 8 9 10 11]]
New array elements:
[[ 0 3 6 9]
[12 15 18 21]
[24 27 30 33]]
***

74. Write a NumPy program to combine a one and a two dimensional array together and display their elements. 
Expected Output:
One dimensional array:
[0 1 2 3]
Two dimensional array:
[[0 1 2 3]
[4 5 6 7]]
0:0
1:1
2:2
3:3
0:4
1:5
2:6
3:7
***

75. Write a NumPy program to create an array of zeros and three column types (integer, float, character). 
Expected Output:
[(1, 2., b'Albert Einstein') (2, 2., b'Edmond Halley')
(3, 3., b'Gertrude B. Elion')]
***

76. Write a NumPy program to create a function cube which cubes all the elements of an array. 
Expected Output:
[ 1 8 27]
***

77. Write a NumPy program to create an array of (3, 4) shape and convert the array elements in smaller chunks. 
Expected Output:
Original array elements:
[[ 0 1 2 3]
[ 4 5 6 7]
[ 8 9 10 11]]
[0 4 8]
[1 5 9]
[ 2 6 10]
[ 3 7 11]
***

78. Write a NumPy program to create a record array from a (flat) list of arrays. 
Sample arrays: [1,2,3,4], ['Red', 'Green', 'White', 'Orange'], [12.20,15,20,40]
Expected Output:
(1, 'Red', 12.2)
(2, 'Green', 15.0)
(3, 'White', 20.0)
***

79. Write a NumPy program to generate a generic 2D Gaussian-like array. 
Expected Output:
2D Gaussian-like array:
[[ 0.36787944 0.44822088 0.51979489 0.57375342 0.60279818 0.60279818
0.57375342 0.51979489 0.44822088 0.36787944]
[ 0.44822088 0.54610814 0.63331324 0.69905581 0.73444367 0.73444367
0.69905581 0.63331324 0.54610814 0.44822088]
.......... [ 0.44822088 0.54610814 0.63331324 0.69905581 0.73444367 0.73444367
0.69905581 0.63331324 0.54610814 0.44822088]
[ 0.36787944 0.44822088 0.51979489 0.57375342 0.60279818 0.60279818
0.57375342 0.51979489 0.44822088 0.36787944]]
***

80. Write a NumPy program to convert a NumPy array into Python list structure. 
Expected Output:
Original array elements:
[[0 1]
[2 3]
[4 5]]
Array to list:
[[0, 1], [2, 3], [4, 5]]
***

81. Write a NumPy program to access an array by column. 
Expected Output:
Original array elements:
[[0 1]
[2 3]
[4 5]]
Access an array by column:
First column:
[0 1]
Second column:
[2 3]
Third column:
[4 5]
***

82. Write a NumPy program to convert a numpy array of float values to a numpy array of integer values. 
Expected Output:
Original array elements:
[[ 12. 12.51]
[ 2.34 7.98]
[ 25.23 36.5 ]]
Conver float values to intger values:
[[12 12]
[ 2 7]
[25 36]]
***

83. Write a NumPy program to display numpy array elements of floating values with given precision. 
Expected Output:
Original array elements:
[ 0.26153123 0.52760141 0.5718299 0.5927067 0.7831874 0.69746349
0.35399976 0.99469633 0.0694458 0.54711478]
Print array values with precision 3:
[ 0.262 0.528 0.572 0.593 0.783 0.697 0.354 0.995 0.069 0.547]
***

84. Write a NumPy program to suppresses the use of scientific notation for small numbers in numpy array. 
Expected Output:
Original array elements:
[ 1.60000000e-10 1.60000000e+00 1.20000000e+03 2.35000000e-01]
Print array values with precision 3:
[ 0. 1.6 1200. 0.235]
***

85. Write a NumPy program to create a numpy array of 10 integers from a generator. 

Expected Output:
[0 1 2 3 4 5 6 7 8 9]
***

86. Write a NumPy program to how to add an extra column to an numpy array. 

Expected Output:
[[ 10 20 30 100]
[ 40 50 60 200]]
***

87. Write a NumPy program to find unique rows in a numpy array. 

Expected Output:
Original array:
[[20 20 20 0]
[ 0 20 20 20]
[ 0 20 20 20]
[20 20 20 0]
[10 20 20 20]]
Unique rows of the above array:
[[ 0 20 20 20]
[10 20 20 20]
[20 20 20 0]]
***

88. Write a NumPy program to replace all elements of numpy array that are greater than specified array. 

Expected Output:
Original array:
[[ 0.42436315 0.48558583 0.32924763]
[ 0.7439979 0.58220701 0.38213418]
[ 0.5097581 0.34528799 0.1563123 ]]
Replace all elements of the said array with .5 which are greater than. 5
[[ 0.42436315 0.48558583 0.32924763]
[ 0.5 0.5 0.38213418]
[ 0.5 0.34528799 0.1563123 ]]
***

89. Write a NumPy program to remove specific elements in a numpy array. 

Expected Output:
Original array:
[ 10 20 30 40 50 60 70 80 90 100]
Delete first, fourth and fifth elements:
[ 20 30 60 70 80 90 100]
***

90. Write a NumPy program to remove the negative values in a numpy array with 0. 

Expected Output:
Original array:
[-1 -4 0 2 3 4 5 -6]
Replace the negative values of the said array with 0:
[0 0 0 2 3 4 5 0]
***

91. Write a NumPy program to remove all rows in a numpy array that contain non-numeric values. 
Expected Output:
Original array:
[[ 1. 2. 3.]
[ 4. 5. nan]
[ 7. 8. 9.]
[ 1. 0. 1.]]
Remove all non-numeric elements of the said array
[[ 1. 2. 3.]
[ 7. 8. 9.]
[ 1. 0. 1.]]
***

92. Write a NumPy program to select indices satisfying multiple conditions in a numpy array. 
Sample array :
a = np.array([97, 101, 105, 111, 117])
b = np.array(['a','e','i','o','u'])
Note: Select the elements from the second array corresponding to elements in the first array that are greater than 100 and less than 110
Expected Output:
Original arrays
[ 97 101 105 111 117]
['a' 'e' 'i' 'o' 'u']
Elements from the second array corresponding to elements in the first
array that are greater than 100 and less than 110:
['e' 'i']
***

93. Write a NumPy program to get the magnitude of a vector in numpy. 
Expected Output:
Original array:
[1 2 3 4 5]
Magnitude of the vector:
7.4161984871
***

94. Write a NumPy program to count the frequency of unique values in numpy array. 
Expected Output:
Original array:
[10 10 20 10 20 20 20 30 30 50 40 40]
Frequency of unique values of the said array:
[[10 20 30 40 50]
[ 3 4 2 2 1]]
***

95. Write a NumPy program to check whether the numpy array is empty or not. 
Expected Output:
2
0
***

96. Write a NumPy program to divide each row by a vector element. 
Expected Output:
Original array:
[[20 20 20]
[30 30 30]
[40 40 40]]
Vector:
[20 30 40]
[[ 1. 1. 1.]
[ 1. 1. 1.]
[ 1. 1. 1.]]
***

97. Write a NumPy program to print all the values of an array. 
Expected Output:
[[ 0. 0. 0. 0.]
[ 0. 0. 0. 0.]
[ 0. 0. 0. 0.]
[ 0. 0. 0. 0.]]
***

98. Write a NumPy program to convert the raw data in an array to a binary string and then create an array. 
Expected Output:
Original array:
[ 10. 20. 30.]
Binary string array:
b'\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x004@\x00\x00\x00\x00\x00\x00>@'
Array using fromstring():
[ 10. 20. 30.]
***

99. Write a NumPy program to sum and compute the product of a numpy array elements. 
Expected Output:
Original array:
[ 10. 20. 30.]
Sum of the array elements:
60.0
Product of the array elements:
6000.0
***

100. Write a NumPy program to take values from a source array and put them at specified indices of another array. 
Expected Output:
[ 10. 10. 20. 30. 30.]
Put 0 and 40 in first and fifth position of the above array
Array x after put two values: [ 0. 10. 20. 30. 40.]
***

101. Write a NumPy program to print the full NumPy array, without truncation. 
Truncated output:
[ 0 1 2 ... 1997 1998 1999]
***

102. Write a NumPy program to convert a NumPy array into a csv file. 

***

103. Write a NumPy program to calculate the Euclidean distance. 
From Wikipedia:
In mathematics, the Euclidean distance or Euclidean metric is the "ordinary" straight-line distance between two points in Euclidean space. With this distance, Euclidean space becomes a metric space. The associated norm is called the Euclidean norm. Older literature refers to the metric as the Pythagorean metric.
Sample Output:
Euclidean distance: 5.196152422706632
***

104. Write a NumPy program to access last two columns of a multidimensional columns. 
Sample Output:
[[1 2 3]
[4 5 6]
[7 8 9]]
[[2 3]
[5 6]
[8 9]]
***

105. Write a NumPy program to read a CSV data file and store records in an array. 
Sample CSV file: fdata.csv
Date,Open,High,Low,Close
03-10-16,774.25,776.065002,769.5,772.559998
04-10-16,776.030029,778.710022,772.890015,776.429993
05-10-16,779.309998,782.070007,775.650024,776.469971
06-10-16,779,780.47998,775.539978,776.859985
07-10-16,779.659973,779.659973,770.75,775.080017
Sample Output:
[(b'Date', nan, nan, nan, nan)
(b'03-10-16', 774.25, 776.065, 769.5 , 772.56)
(b'04-10-16', 776.03, 778.71 , 772.89, 776.43)
(b'05-10-16', 779.31, 782.07 , 775.65, 776.47)
(b'06-10-16', 779. , 780.48 , 775.54, 776.86)
(b'07-10-16', 779.66, 779.66 , 770.75, 775.08)]
***

106. Write a NumPy program to count the occurrence of a specified item in a given NumPy array. 
Sample Output:
Original array:
[10 20 20 20 20 0 20 30 30 30 0 0 20 20 0]
1
7
3
4
***

107. Write a NumPy program to calculate percentiles for a sequence or single-dimensional NumPy array. 
Sample Output:
50th percentile (median):
3.0
40th percentile:
2.6
90th percentile:
4.6
***

108. Write a NumPy program to convert a PIL Image into a numpy array. 
Sample Output:
[[[255 255 255 0]
[255 255 255 0]
[255 255 255 0]
.......
[255 255 255 0]]]
***

109. Write a NumPy program to convert a numpy array to an image. Display the image. 
Sample Output:
test image
***

110. Write a NumPy program to remove nan values from an given array. 
Sample Output:
Original array:
[200. 300. nan nan nan 700.]
After removing nan values:
[200. 300. 700.]
Original array:
[[ 1. 2. 3.]
[nan 0. nan]
[ 6. 7. nan]]
After removing nan values:
[1. 2. 3. 0. 6. 7.]
***

111. Write a NumPy program to create a Cartesian product of two arrays into single array of 2D points. 
Sample Output:
[[1 4]
[2 4]
[3 4]
[1 5]
[2 5]
[3 5]]
***

112. Write a NumPy program to get the memory usage by numpy arrays. 
Sample Output:
8256
***

113. Write a NumPy program to build an array of all combinations of three numpy arrays. 
Sample Output:
Original arrays:
Array-1
[1, 2, 3]
Array-2
[4, 5]
Array-3
[6, 7]
Combine array:
[[1 4 6]
[1 5 6]
[2 4 6]
[2 5 6]
[3 4 6]
[3 5 6]
[1 4 7]
[1 5 7]
[2 4 7]
[2 5 7]
[3 4 7]
[3 5 7]]
***

114. Write a NumPy program to create random set of rows from 2D array. 
Sample Output:
Random set of rows from 2D array array:
[[4 0 2]
[4 2 4]
[1 0 4]
[4 4 3]
[3 4 3]]
***

115. Write a NumPy program to find indices of elements equal to zero in a numpy array. 
Sample Output:
Original array:
[1 0 2 0 3 0 4 5 6 7 8]
Indices of elements equal to zero of the said array:
[1 3 5]
***

116. Write a NumPy program to compute the histogram of a set of data. 
Sample Output:
Histogram image
***

117. Write a NumPy program to compute the line graph of a set of data. 
Sample Output:
Line graph image
***

118. Write a NumPy program to find the position of the index of a specified value greater than existing value in numpy array. 
Sample Output:
Original array:
[-6 -5 -4 -3 -2 -1 0 1 2 3 4 5]
Position of the index:
9
***

119. Write a NumPy program to add a new row to an empty numpy array. 
Sample Output:
Empty array:
[]
After adding two new arrays:
[[10 20 30]
[40 50 60]]
***

120. Write a NumPy program to get the index of a maximum element in a numpy array along one axis. 
Sample Output:
Original array:
[[1 2 3]
[4 3 1]]
Index of a maximum element in a numpy array along one axis:
4
***

121. Write a NumPy program to join a sequence of arrays along a new axis. 
Sample Output:
Original arrays:
[1 2 3]
[2 3 4]
Sequence of arrays along a new axis:
[[1 2 3]
[2 3 4]]
Original arrays:
[[1]
[2]
[3]]
[[2]
[3]
[4]]
Sequence of arrays along a new axis:
[[1]
[2]
[3]
[2]
[3]
[4]]
***

122. Write a NumPy program to find the index of the sliced elements as follows from a give 4x4 array. 
Sample Output:
Original arrays:
[[ 0 1 2 3]
[ 4 5 6 7]
[ 8 9 10 11]
[12 13 14 15]]
Sliced elements:
[ 0 5 11]
***

123. Write a NumPy program to create two arrays when the size is bigger or smaller than a given array. 
Sample Output:
Original arrays:
[[ 0 1 2 3]
[ 4 5 6 7]
[ 8 9 10 11]
[12 13 14 15]]
Array with size 2x2 from the said array:
[[0 1]
[2 3]]
Array with size 6x6 from the said array:
[[ 0 1 2 3 4 5]
[ 6 7 8 9 10 11]
[12 13 14 15 0 1]
[ 2 3 4 5 6 7]
[ 8 9 10 11 12 13]
[14 15 0 1 2 3]]
***

124. Write a NumPy program to broadcast on different shapes of arrays where p(3,3) + q(3). 
Sample Output:
Original arrays:
Array-1
[[0 0 0]
[1 2 3]
[4 5 6]]
Array-2
[10 11 12]
New Array:
[[10 11 12]
[11 13 15]
[14 16 18]]
***

125. Write a NumPy program to broadcast on different shapes of arrays where a(,3) + b(3). 
Sample Output:
Original arrays:
Array-1
[[ 0]
[10]
[20]]
Array-2
[10 11 12]
New Array:
[[10 11 12]
[20 21 22]
[30 31 32]]
***

126. Write a NumPy program to rearrange the dimensions of a given array. 
Sample Output:
Original arrays:
[[ 0 1 2 3]
[ 4 5 6 7]
[ 8 9 10 11]
[12 13 14 15]
[16 17 18 19]
[20 21 22 23]]
After reverse the dimensions:
[[ 0 4 8 12 16 20]
[ 1 5 9 13 17 21]
[ 2 6 10 14 18 22]
[ 3 7 11 15 19 23]]
***

127. Write a NumPy program to stack arrays in sequence horizontally (column wise). 
Sample Output:
Original arrays:
Array-1
[[0 1 2]
[3 4 5]
[6 7 8]]
Array-2
[[ 0 3 6]
[ 9 12 15]
[18 21 24]]
Stack arrays in sequence horizontally:
[[ 0 1 2 0 3 6]
[ 3 4 5 9 12 15]
[ 6 7 8 18 21 24]]
***

128. Write a NumPy program to stack arrays in sequence vertically. 
Sample Output:
Original arrays:
Array-1
[[0 1 2]
[3 4 5]
[6 7 8]]
Array-2
[[ 0 3 6]
[ 9 12 15]
[18 21 24]]
Stack arrays in sequence vertically:
[[ 0 1 2]
[ 3 4 5]
[ 6 7 8]
[ 0 3 6]
[ 9 12 15]
[18 21 24]]
***

129. Write a NumPy program to stack 1-D arrays as columns wise. 
Sample Output:
Original arrays:
Array-1
[1 2 3]
Array-2
[2 3 4]
Stack 1-D arrays as columns wise:
[[1 2]
[2 3]
[3 4]]
***

130. Write a NumPy program to stack 1-D arrays as row wise. 
Sample Output:
Original arrays:
Array-1
[1 2 3]
Array-2
[2 3 4]
Stack 1-D arrays as rows wise:
[[1 2 3]
[2 3 4]]
***

131. Write a NumPy program to split an given array into multiple sub-arrays vertically (row-wise). 
Sample Output:
Original arrays:
[[ 0. 1. 2. 3.]
[ 4. 5. 6. 7.]
[ 8. 9. 10. 11.]
[12. 13. 14. 15.]]
Split an array into multiple sub-arrays vertically:
[array([[0., 1., 2., 3.],
[4., 5., 6., 7.]]), array([[ 8., 9., 10., 11.],
[12., 13., 14., 15.]])]
***

132. Write a NumPy program to split array into multiple sub-arrays along the 3rd axis. 
Sample Output:
Original arrays:
[[[ 0. 1. 2. 3.]
[ 4. 5. 6. 7.]]
[[ 8. 9. 10. 11.]
[12. 13. 14. 15.]]]
split array into multiple sub-arrays along the 3rd axis:
[array([[[ 0., 1.],
[ 4., 5.]],
[[ 8., 9.],
[12., 13.]]]), array([[[ 2., 3.],
[ 6., 7.]],
[[10., 11.],
[14., 15.]]])]
***

133. Write a NumPy program to count the number of dimensions, number of elements and number of bytes for each element in a given array. 
Sample Output:
Original arrays:
[[ 0 1 2 3 4 5 6 7 8 9 10 11]
[12 13 14 15 16 17 18 19 20 21 22 23]]
Number of dimensions:
2
Number of elements:
24
Number of bytes for each element in the said array:
8
***

134. Write a NumPy program to extract all the elements of the first row from a given (4x4) array. 
Sample Output:
Original array:
[[ 0 1 2 3]
[ 4 5 6 7]
[ 8 9 10 11]
[12 13 14 15]]
Extracted data: First row
[0 1 2 3]
***

135. Write a NumPy program to extract all the elements of the second row from a given (4x4) array. 
Sample Output:
Original array:
[[ 0 1 2 3]
[ 4 5 6 7]
[ 8 9 10 11]
[12 13 14 15]]
Extracted data: Second row
[4 5 6 7]
***